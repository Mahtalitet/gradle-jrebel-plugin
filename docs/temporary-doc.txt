As a very-very temporary means of backing up/versioning the documentation, storing here
the Wordpress markup for the blog post that is currently the only end-user documentation
we have.

TODO - improve!

(blog post url: http://zeroturnaround.com/blog/jrebel-gradle-plugin-beta/ )

==========================================================================================

As more folks begin looking into the Groovy ecosystem, we’ve been hearing from more developers interesting in using JRebel with <a href="http://www.gradle.org">Gradle</a>.

As you know, JRebel provides instant builds in addition to eliminating redeploys, but for that special bit of magic to work, we need to generate a rebel.xml to map the project during the build, like our <a href="http://zeroturnaround.com/jrebel/configuration/maven/">existing Maven plugin</a>.

Recently we’ve implemented a very basic version of the Gradle plugin, which is available from the <a href="http://repos.zeroturnaround.com/nexus/content/groups/zt-public/org/zeroturnaround/gradle-jrebel-plugin/">ZeroTurnaround repositor</a>y and was tested with Gradle 1.0-milestone-6. So far, we’re keeping things simple (configurability is limited and will only support a limited number of project types, i.e. only jar and war projects), while the work continues.

Of course, one way to improve this plugin and life in general is to hear back from users! So give it a try and tell us on the <a href="http://zeroturnaround.com/forum/">forum</a> which configuration options you think we be awesome to see in future releases.
<h2>STEP 1: Automatically generate rebel.xml at each build</h2>
Add this to you build.gradle:
<code></code>
<pre>apply plugin: 'rebel'

// A dependency for Gradle itself. Don't mix up with your project's dependencies.
// Has to be in a "buildscript" block.
buildscript {
  repositories {
     mavenLocal()
     mavenCentral()
     mavenRepo(name: 'zt-public-snapshots',
               url: 'http://repos.zeroturnaround.com/nexus/content/groups/zt-public/')
  }

  dependencies {
     classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.0.2-SNAPSHOT'
  }
}</pre>
<h2>STEP 2: Additional configuration</h2>
Add “rebel” element with following parameters to your build.gradle:
<pre>
rebel {
  /*
   * alwaysGenerate - default is false
   *
   * If 'false' - rebel.xml is generated if timestamps of build.gradle and the current rebel.xml file are not equal.
   * If 'true' - rebel.xml will always be generated
   */
  // alwaysGenerate = true

  /*
   * showGenerated - default is false
   *
   * If 'true' generated rebel.xml will be printed out in console, so you can immediately see what was generated
   */
  // showGenerated = true

  /*
   * rebelXmlDirectory - default is 'build/classes'
   *
   * Output directory for rebel.xml.
   */
  // rebelXmlDirectory = "build/myClasses"

  /*
   * warSourceDirectory - default is 'src/main/webapp'
   *
   * The directory with web resources.
   */
  // warSourceDirectory = "src/main/myWebapp"
}
</pre>

You probably also want to make Rebel plugin's <code>generateResources</code> task part of your main build flow, instead of executing it manually after every clean. Many tasks should be suitable as the injection point (<code>processResources</code>, <code>jar</code>, <code>build</code>, ..).

<pre>
processResources.dependsOn(generateRebel)
</pre>

<h2>STEP 3: Let us know what rocks/sux</h2>
As stated above, it's crucial to hear feedback in order to make improvements, so feel free to post your feedback to our <a href="http://zeroturnaround.com/forums/">forum</a> or below in the comments section. Have a productive day!
